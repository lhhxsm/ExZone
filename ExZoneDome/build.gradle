apply plugin: 'com.android.application'
apply from: '../config/quality.gradle'

def debugTime() {
    return new Date().format("HH-mm-ss", TimeZone.getTimeZone("UTC"))
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.exzone.demo"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    dexOptions {
        preDexLibraries false
        javaMaxHeapSize "4g"
//        incremental true
        jumboMode = true
    }
    signingConfigs {//签名的配置
        release {
            keyAlias "${KEY_ALIAS}"
            keyPassword "${KEY_PASSWORD}"
            storeFile file("${KEYSTORE_FILE}")
            storePassword "${KEYSTORE_PASSWORD}"

//            storeFile file("签名文件名称.jks")
//            storePassword '密码'
//            keyAlias '签名文件别名'
//            keyPassword '密码'
        }
        debug {
//            keyAlias props['KEY_ALIAS']
//            keyPassword props['KEY_PASSWORD']
//            storeFile file(props['KEYSTORE_FILE'])
//            storePassword props['KEYSTORE_PASSWORD']
            keyAlias "${KEY_ALIAS}"
            keyPassword "${KEY_PASSWORD}"
            storeFile file("${KEYSTORE_FILE}")
            storePassword "${KEYSTORE_PASSWORD}"
        }
    }
    buildTypes {
        debug {
            minifyEnabled true//是否启动混淆
            zipAlignEnabled true//是否启动zipAlign
            shrinkResources true//是否移除无用的resource文件
            signingConfig signingConfigs.debug//打包命令行：gradlew assembleDebug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            applicationVariants.all { variant ->
//                if (variant.buildType.name == 'debug') {
//                    variant.outputs.each { output ->
//                        def outputFile = output.outputFile
//                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                            def fileName = "${debugTime()}_ExZone_${defaultConfig.versionName}_debug.apk"
//                            //output.outputFile = new File(outputFile.parent, fileName)
//                            //自定义APK的输出路径
//                            output.outputFile = new File(file("${OUTPUT_FILE}"), fileName)
//                        }
//                    }
//                }
//            }
        }
        release {
            minifyEnabled true//是否启动混淆
            zipAlignEnabled true//是否启动zipAlign
            shrinkResources true//是否移除无用的resource文件
            signingConfig signingConfigs.release//打包命令行：gradlew assembleRelease
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                if (variant.buildType.name == 'release') {
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            def fileName = "${releaseTime()}_ExZone_${defaultConfig.versionName}_release.apk"
                            //output.outputFile = new File(outputFile.parent, fileName)
                            //自定义APK的输出路径
                            output.outputFile = new File(file("${OUTPUT_FILE}"), fileName)
                        }
                    }
                }
            }
        }
    }

    lintOptions {
        //设置编译的lint开关，程序在build的时候，会执行lint检查，有任何的错误或者警告提示，都会终止构建
        warning 'InvalidPackage'
        abortOnError true
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    sourceSets{
        main{
            jniLibs.srcDirs=['libs']
        }
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:multidex:1.0.1'
    compile project(':ExZoneLib')
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

